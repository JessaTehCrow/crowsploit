EvalType = {}
EvalType.New = function(text)
    p = new self
    
    p.value = text
    p.quoted = false
    p.type = null
    p.eval_value = null

    p.evaluate()

    return p
end function


EvalType.evaluate = function()
    if self.value.is_match("^\d+\.\d+$") then
        self.eval_value = self.value.val
        self.type = "float"

    else if is_valid_ip(self.value) or self.value == "localhost" then
        self.eval_value = self.value
        self.type = "ip"

    else if self.value.is_match("^\d+$") then
        self.eval_value = self.value.to_int
        self.type = "int"

    else if self.value.is_match("^(true|false|1|0)$") then
        self.eval_value = self.value.is_match("^(true|1)$")
        self.type = "bool"

    else
        // first & last char of value
        stringcheck = self.value[:1]+self.value[-1:]
        if stringcheck == "''" or stringcheck == """""" then
            self.eval_value = self.value[1:-1]
            self.quoted = true
        else
            self.eval_value = self.value
        end if

        self.type = "string"
    end if
end function


parse_input = function(text, evaluate=false, keep_quotes=false)
    if evaluate then keep_quotes = true

    out = []
    temp = ""
    quote = null
    backs = false

    temp_last = null
    for x in text
        last = temp_last
        temp_last = x

        // Check if escape was actually used, otherwise add before last character
        if last != "\" and backs then
            temp = temp[:-1] + "\" + temp[-1]
            backs = false
        end if

        // Check if escape character is active 
        if x == "\" then
            backs = not backs

            // If escape character is instantly canceled afterwards
            // Add to result
            if backs == false then
                temp = temp + "\"
            end if
            continue
        end if

        // Parse quotation / string inputs
        if x == "'" or x == """" then
            // Ignore all quotes if escaped
            if backs then
                backs = false
                temp = temp + x
                continue
            end if

            // if quote not registered yet, start new string
            if quote == null then
                quote = x

                if temp != "" then
                    out.push(temp)
                end if

                temp = ""
                if keep_quotes then
                    temp = x
                end if

                continue

            // If quote char isn't the current active one,
            // treat it as normal character
            else if quote != null and quote != x then
                temp = temp + x
                continue

            // If quote char is the current active one,
            // And not escaped, then close string
            else
                if keep_quotes then temp = temp + quote
                quote = null
                out.push(temp)
                temp = ""
                continue
            end if
        end if
        
        // Seperations
        if x == " " and temp != "" and not quote then 
            out.push(temp)
            temp = ""
            continue
        end if

        // If it's not special, just add it
        temp = temp + x
    end for

    if temp != "" then out.push(temp)

    if not evaluate then return out

    eval_out = []

    for x in out
        eval_out.push(EvalType.New(x))
    end for

    return eval_out
end function


eval_parsed_input = function(parsed)
    result = []
    
    for x in parsed
        parsed_value = EvalType.New(x)
        result.push(parsed_value)
    end for

    return result
end function
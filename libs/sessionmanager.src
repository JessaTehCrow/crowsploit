import_code("./proxies")

Session = {}

Session.user = "Unknown"
Session.comp_name = "Unknown"
Session.id = null
Session.shell = null
Session.computer = null
Session.file = null
Session.history = []
Session.path = null

Session.metax = null
Session.meta_dir = null

Session.crypto = null
Session.crypto_dir = null

Session.apt = null
Session.apt_dir = null

Session.router = null

Session.wan = null
Session.lan = null


Session.New = function(obj)
    success = obj.hasIndex("object")

    if obj isa string then return TypeError.New("Session.New","shell,computer,file", typeof(obj))
    if not success then return TypeError.New("Session.New","shell,computer,file", typeof(obj))

    session = new self

    session.user = obj.get_user()
    if obj.type == "shell" then
        session.shell = obj
        session.computer = obj.host_computer
        session.file = session.computer.File("/")

    else if obj.type == "computer" then
        session.computer = obj
        session.file = obj.File("/")

    else if obj.type == "file" then
        session.file = obj
    end if

    if session.computer != null then
        session.comp_name = session.computer.get_name
        session.lan = session.computer.local_ip
        session.wan = session.computer.public_ip
    end if

    return session
end function


Session.load_lib = function(path)
    lib = include_lib(path)
    libtype = typeof(lib)
    if libtype == "cryptoLib" then
        self.crypto = lib
        self.crypto_dir = path
        return true
    else if libtype == "MetaxploitLib" then
        self.metax = lib
        self.meta_dir = path
        return true
    else if libtype == "aptclientLib" then
        self.apt = lib
        self.apt_dir = path
        return true
    end if

    return false
end function


Session.load_libs = function(folder)
    folder = self.file.goto(folder)
    if is_error(folder) then return folder.stack("Session.load_libs")

    loaded = []
    for x in folder.get_files
        if x.name[-3:] != ".so" then continue

        r = self.load_lib(x.path)
        if not r then continue
        loaded.push(x.name)
    end for

    return loaded
end function


Session.overwrite = function(session)
    self.user = session.user
    self.comp_name = session.comp_name
    self.shell = session.shell
    self.computer = session.computer
    self.file = session.file
    self.history = session.history
    self.router = session.router
    self.wan = session.wan
    self.lan = session.lan
end function


Session.homepath = function()
    user = self.user
    home_path = "/home/" + user
    if user == "root" then
        home_path = "/root"
    end if
    return home_path
end function
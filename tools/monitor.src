import_code("../kernel/toolkernel")
import_code("../libs/utils")

monitor = Tool.New("monitor", "1.0.0")

monitor.short_description = "Monitor the system for changes"
monitor.long_description =  "Monitor the system for changes"

shell = get_shell()
comp = shell.host_computer

colors = {
    "file" : "<#aaa>",
    "folder" : "<#08f>",
    "binary" : "<#0e8>",
    "symlink" : "<#c158d6>",
    "new" : "<#0f4>",
    "missing" : "<#f04>",
    "changed" : "<#fa0>",
    "normal" : "<#aaa>",
    "misc" : "<#08f>",
}

get_type = function(file_ob)
    if file_ob.is_folder then
        return "folder"
    else if file_ob.is_binary then
        return "binary"
    end if
    return "file"
end function

true_type = function(ob)
    if ob.is_symlink then
        return "symlink"
    end if
    return get_type(ob)
end function

change = function(type, a, b)
    return {
        "type":type,
        "original":a,
        "new":b,
    }
end function

F = {}
F.New = function(a)
    f = new self
    f.group = a.group
    f.permissions = a.permissions
    f.type = get_type(a)
    f.size = a.size
    f.path = a.path
    f.owner = a.owner
    f.content = null
    f.name = a.name
    f.truetype = true_type(a)
    f.color = colors[f.truetype]

    if f.type == "file" and a.has_permission("r") then
        f.content = a.get_content()
    end if

    return f
end function

F.is = function(b)
    if b.path != self.path then return false
    if b.type != self.type then return false
    
    return true
end function

F.difference = function(b)
    result = []
    a = self

    if b.size != a.size then 
        result.push(change("size", b.size, a.size))
    end if
    if b.name != a.name then 
        result.push(change("name", b.name, a.name))
    end if
    if b.group != a.group then 
        result.push( change("group", b.group, a.group))
    end if
    if b.owner != a.owner then 
        result.push(change("owner", b.owner, a.owner))
    end if
    if a.permissions != b.permissions then
        result.push(change("permissions", b.permissions, a.permissions))
    end if

    if a.content != b.content and a.content != null then
        result.push(change("content", a.content, b.content))
    end if

    return result
end function

F.similar = function(b)
    result = 0
    a = self
    if a.type != b.type then return false
    if a.size == b.size then result = result + 1
    if a.name == b.name then result = result + 1
    if a.group == b.group then result = result + 1
    if a.owner == b.owner then result = result + 1
    if a.permissions == b.permissions then result = result + 1
    if a.content == b.content then result = result + 1
    if a.path == b.path then result = result + 1

    return result >= 5
end function

get_files = function(folder)
    result = [F.New(folder)]
    for x in folder.get_files
        result.push(F.New(x))
    end for
    for x in folder.get_folders
        result = result + get_files(x)
    end for
    return result
end function

get_procs = function(c)
    procs = c.show_procs.split(char(10))[1:]
    result = []
    for p in procs
        temp = p.split(" ")
        user = temp[0]
        pid = temp[1]
        command = temp[4]
        result.push({"pid":pid, "command":command, "user":user})
    end for
    return result
end function

difference_files = function(a,b)
    new_items = []
    missing_items = []
    changed_items = {}

    found_a = []
    for x in a
        found = false
        for y in b
            if x.is(y) and found_a.indexOf(__y_idx) == null then
                found_a.push(__y_idx)
                found = true
                dif = x.difference(y)
                if dif != [] then changed_items[x.path] = {"file":x,"change":dif}
                break
            end if
        end for

        if not found then
            new_items.push(x)
        end if
    end for

    found_b = []
    for x in b
        found = false
        for y in a
            if x.is(y) and found_b.indexOf(__y_idx) == null then
                found_b.push(__y_idx)
                found = true
                dif = y.difference(x)
                if dif != [] then changed_items[x.path] = {"file":y,"change":dif}
                break
            end if
        end for

        if not found then
            missing_items.push(x)
        end if
    end for
    return {"new":new_items,"missing":missing_items,"changed":changed_items.values}
end function

_difference = function(a,b)
    new_items = []
    missing_items = []

    found_a = []
    for x in a
        found = false
        for y in b
            if x == y and found_a.indexOf(__y_idx) == null then
                found_a.push(__y_idx)
                found = true
                break
            end if
        end for

        if not found then
            new_items.push(x)
        end if
    end for

    found_b = []
    for x in b
        found = false
        for y in a
            if x == y and found_b.indexOf(__y_idx) == null then
                found_b.push(__y_idx)
                found = true
                break
            end if
        end for

        if not found then
            missing_items.push(x)
        end if
    end for
    return {"new":new_items,"missing":missing_items}
end function

gen_thing = function(l)
    result = ""
    chars = "abcdefghijklmnopqrstuvwxz1234567890"
    for x in range(0, l)
        result = result + chars[round(rnd*(chars.len-1))]
    end for
    return result
end function

monitor_main_args = [
    Kwarg.New("download", "bool").Alias("d").Info("Download changes for content"),
    Kwarg.New("timeout", "float").Default(1).Alias("t").Info("Timeout between system scans")
]

monitor_main_func = function(a)
    home = a.kernel.sessions[0]
    comp = a.kernel.session.computer
    old_files = get_files(comp.File("/"))
    old_processes = get_procs(comp)

    while true
        new_files = get_files(comp.File("/"))
        new_processes = get_procs(comp)

        difference = difference_files(new_files, old_files)

        skip = []
        for x in difference.missing 
            for y in difference["new"]
                if x.similar(y) then
                    skip.push(x)
                    skip.push(y)
                    print(colors.changed + "- " + x.color + x.path + colors.changed + " > " + x.color + y.path)
                    break
                end if
            end for
        end for

        for x in difference.missing
            if skip.indexOf(x) != null then continue
            print(colors.missing + "x " + x.color + x.path)
        end for

        for x in difference["new"]
            if skip.indexOf(x) != null then continue
            if a.download and x.type == "file" then
                if x.content != "" and x.content != null then
                    id = gen_thing(10)
                    home.computer.touch("/root/content", x.name +"_" + id)
                    wait(0.1)
                    home.computer.File("/root/content/"+x.name+"_"+id).set_content(x.content)
                    print(colors["new"] + "+ " + x.color + x.path + colors.normal + " -> " + "/root/content/" +x.name + "_" + id)
                else
                    print(colors["new"] + "+ " + x.color + x.path)
                end if
            else
                print(colors["new"] + "+ " + x.color + x.path)
            end if
        end for

        for x in difference.changed
            for y in x.change
                if y.type == "content" then
                    if a.download then
                        id = gen_thing(10)
                        out_p = "/root/content/"
                        out_n = x.file.name + "_" + id
                        out = out_p + out_n
                        home.computer.touch(out_p, out_n)
                        print(colors.changed + "? " + x.file.color + x.file.path + colors.normal + " : " + y.type + " -> " + out)
                        wait(0.1)
                        home.computer.File(out).set_content(x.file.content)
                    else
                        print(colors.changed + "? " + x.file.color + x.file.path + colors.normal + " : " + y.type)
                    end if
                else
                    print(colors.changed + "? " + x.file.color + x.file.path + colors.normal + " : " + y.type + " : " + colors.misc + y.original + colors.changed + " > " + colors.misc + y["new"])
                end if
            end for
        end for

        difference = _difference(new_processes,old_processes)
        for x in difference["new"]
            print(colors["new"] + "> " + colors.normal + x.command + "<#888> : " + colors.normal + x.pid + " @ " + colors.misc + x.user)
        end for
        for x in difference.missing
            print(colors.missing + "- " + colors.normal + x.command + "<#888> : " + colors.normal + x.pid + " @ " + colors.misc + x.user)
        end for

        old_files = new_files
        old_processes = new_processes
        wait(a.timeout)
    end while
    
end function

monitor_cmd = monitor.main_command(monitor_main_args, @monitor_main_func)

monitor.init()
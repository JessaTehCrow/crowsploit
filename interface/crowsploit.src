import_code("../kernel/mainkernel")
import_code("../libs/proxyextension")
import_code("../libs/utils")

if program_path == "/etc/crow/tools/crowsploit" then exit("<#f00>crowsploit detected running as a tool. Quitting loop")

interface_version = "1.3.0"

motd = "$T;    ___                  $P;|$T;             ___     
$T;    \  '———.____     __ $P;-$S;+$P;-$T;   ____.———'  / 
$T;     \____      /   /_ \ $P;|$T;   \     _____/
$T;       \____    \____/  \____/    ____/
$T;        \____     $P;Crowsploit$T;     ____/
$T;            '——._____    _____.——'
$T;                    /____\"

fun_facts = [
    "Crows can have grudges on people, as well as pass them down to their young",
    "Befriending wild crows is very easy! All you need to do is give them food",
    "Crows will give gifts to people that feed them regularly",
    "Research on crows shows that their inteligence is comparable to a 7 year old",
    "When a crow dies, their family will hold a crow-equivalent of a funeral",
    "Crows can use basic tools to get whatever they need done",
    "To crack open nuts, crows will put them on the road until a car drives over them",
    "Crows have the ability to mimic human speach, much like a parrot",
    "Though ravens and crows are very similar, they don't get along with eachother",
    "Crows have a slimmer and curvier beak compared to a raven",
    "Crows and bluejays don't look alike, but they are from the same animal family",
    "When it snows, crows like to play and slide down it with their buddies",
    "Crows and other corvids like hanging upside down, for the fun of it!",
]

secret_facts = [
    "<#4f8>This message has a 1 in 2000 chance to show up!",
    "I know where you are",
    "<b>I am in your network",
    "TmV2ZXIgZ29ubmEgZ2l2ZSB5b3UgdXAsIE5ldmVyIGdvbm5hIGxldCB5b3UgZG93bg==",
]

get_fact = function()
    fact = fun_facts[random(0,fun_facts.len-1)]

    if random(0,500) == 1 then
        fact = "$error;" + secret_facts[random(0, secret_facts.len-1)]
    end if
    return fact
end function

custom_obj = get_custom_object
kernel = null
shell = Shell.New(get_shell)
comp = shell.host_computer

kernel_setup = function()
    e = comp.create_folder("/etc", "crow")
    if is_error(e) then return e
    e = comp.create_folder("/etc/crow", "tools")
    if is_error(e) then return e

    print("<#4fa>Created folder <#4af>/etc/crow/tools")
    print("<#999>Move the <#4af>system<#999> tool into the <#4af>/etc/crow/tools<#999> folder and restart crowsploit")
end function

if hasIndex(custom_obj, "kernel") and params == ["main"] then
    kernel = custom_obj["kernel"]
    remove(custom_obj, "kernel")

else if hasIndex(custom_obj, "kernel") then
    kernel = custom_obj.kernel(simple_hash(current_date))

    kernel.print("$P;Crowsploit connected to kernel")
    custom_obj.remove("kernel")

    active = kernel.active_sessions[0]
    session = kernel.session
    session.user = active_user
    if comp.is_network_active then
        session.router = get_router
    end if

    session.path = program_path 
    session.file = session.file.goto(current_path)
    destination = current_path
    
    if not params.indexOf("nolibs") != null then
        active.shell.scp(active.meta_dir, destination, session.shell)
        active.shell.scp(active.apt_dir, destination, session.shell)
        if params.indexOf("crypto") != null then active.shell.scp(active.crypto_dir, destination, session.shell)

        if session.hasIndex("load_libs") then
            print("New method")
            loaded = session.load_libs(destination)
            for x in loaded
                kernel.print("$S;Loaded " + x[:-3])
            end for
        else
            // Backward compatability
            for x in ["metaxploit.so", "crypto.so", "aptclient.so"] 
                res = session.load_lib(destination +"/"+x)
                if res == null or res == false then continue
                kernel.print("$S;Loaded " + x[:-3])
            end for
        end if
    end if

    kernel.active_session = session
    kernel.active_sessions.push(session)
    kernel.env.ACTIVE = session.id

else if params == ["setup"] then
    e = kernel_setup()
    if is_error(e) then
        print(e.trace())
    else
        print("<#4fa>Setup complete")
    end if
    exit()
else
    kernel = new Kernel
    session = Session.New(shell)
    session.user = active_user
    if comp.is_network_active then
        session.router = get_router
    end if
    session.path = launch_path
    session.file = session.file.goto(current_path)

    kernel.new_session(session)
    kernel.active_session = session
    kernel.active_sessions.push(session)

    kernel.use_session(session)

    error = kernel.load_settings(session.homepath + "/.crowrc")
    if is_error(error) then
        print("<#e05>Missing settings")
        print("<#e05>Creating settings in : " + session.homepath + "/.crowrc")
        touch_err = comp.touch(session.homepath, ".crowrc", SETTINGS_DEFAULT)
        if touch_err then print(touch_err.message)
        error = kernel.load_settings(session.homepath + "/.crowrc")
    end if
    if is_error(error) then exit(error.message)

    // Backwards compatability with loading library stuff
    if not kernel.settings.hasIndex("library") then
        kernel.settings.library = {
            "path":"/etc/crow/libs",
            "auto_update_meta":"true",
            "auto_install":"true"
        }
    end if

    // Check if lib folder exists, otherwise, make it exist (mood tbh)
    if is_error(session.file.goto(kernel.settings.library.path)) then
        res = session.computer.create_folder("/etc/crow", "libs")
        if is_error(res) then kernel.print("$error;No permission to create folder: /etc/crow/libs")
    end if

    loaded = session.load_libs(kernel.settings.library.path)

    // Find and copy apt in /lib
    if session.apt == null then
        file = session.file.get_file("/lib/aptclient.so")
        if not is_error(file) then file.copy(kernel.settings.library.path, "aptclient.so")

        apt = include_lib(kernel.settings.library.path + "/aptclient.so")
        session.apt = apt
    end if

    // Check / ask for hackshop ip
    if session.apt and session.apt.search("metaxploit.so").is_match("(in any repository$|refresh the file$)") then
        res = confirmation_prompt("No hackshops in sources.txt for apt. Do you want to add one?")
        if res then
            hackshop = null

            kernel.print("$T2;Searching a hackshop...")
            while hackshop == null
                router = get_router(kernel.env.RAND_IP)
                if router == null then continue
                for x in router.used_ports
                    if x.port_number != 1542 then continue
                    hackshop = router.public_ip
                    break
                end for
            end while

            session.apt.add_repo(hackshop, 1542)
            session.apt.update()

            kernel.print("$S;Added repository from ip: $P;" + hackshop)
        end if
    end if

    // Install missing
    if len(loaded) != 3 and kernel.settings.library.auto_install == "true" and not is_error(loaded) then
        if not session.apt then 
            kernel.print("$error;Aptclient not present in "+kernel.settings.library.path+", unable to install libraries")
        else
            for x in ["metaxploit.so", "crypto.so"] 
                if loaded.indexOf(x) != null then continue

                result = session.apt.install(x, kernel.settings.library.path)
                if result == null then kernel.print("$error;Failed to install " + x)
                if result != "" and result != 1 then kernel.print("$error;Failed to install "+x+" : " + result)
            end for
        end if
    end if

    // Update metaxploit
    if session.apt and kernel.settings.library.auto_update_meta == "true" then
        check = session.apt.check_upgrade(kernel.settings.library.path + "/metaxploit.so")

        if check isa string then 
            kernel.print("$error;Failed to check for update : " + check)

        else if check then
            result = session.apt.install("metaxploit.so", kernel.settings.library.path)
            
            if result == null then kernel.print("$error;Failed to install metaxploit.so")
            if result != "" and result != 1 then kernel.print("$error;Failed to install metaxploit.so : " + result)
        end if
    end if

    session.load_libs(kernel.settings.library.path)

    print(char(10))
    kernel.print(motd)
    print(char(10))
    kernel.line("Info", 47)
    kernel.print("              $P;By <b><u>JessaTehCrow" + char(10))
    kernel.print("       $S;Kernel version $T;: $T2;" + kernel.version)
    kernel.print("    $S;Interface version $T;: $T2;" + interface_version)
    if kernel.nightly then
        kernel.print("          $S;Kernel type$T; : $error;Nightly")
        kernel.print("$T;<i>    (Some features may not be stable)")
    end if

    print(char(10))
    kernel.print("$T;Fun fact")
    kernel.print("$S;<size=80%>" + get_fact())
    print(char(10))
    if session.crypto == null then
        kernel.print("$error;Crypto not found")
    end if
    if session.metax == null then
        kernel.print("$error;Metaxploit not found")
    end if
    kernel.load_tools()

    kernel.print()
    kernel.print("$P;Check for updates on $T2;www.crowsploit.com!")
    kernel.print("$S;Join the discord: $T2;discord.gg/qW5Uv2SAmq $S;for help and more info!")
    
    while kernel.keep_session
        custom_obj.kernel = kernel
        shell.launch(program_path, "main")
        kernel.silent = false
        kernel.piped = false
    end while
end if

while kernel.keep_session
    inp = user_input(kernel.get_prompt + " ")
    if inp == "" then continue
    while inp.trim()[-1] == "\"
        inp = inp.trim[:-1]
        user_inp = user_input(kernel.color("$input;") + " ")
        inp = inp + " " + user_inp
    end while

    kernel.run_command(inp)
end while
import_code("../kernel/mainkernel")
import_code("../libs/proxyextension")
import_code("../libs/utils")
import_code("../constants/motd")

if program_path == "/etc/crow/tools/crowsploit" then exit("<#f00>crowsploit detected running as a tool. Quitting loop")

interface_version = "1.4.2"

get_fact = function()
    fact = fun_facts[random(0,fun_facts.len-1)]

    if random(0,500) == 1 then
        fact = "$error;" + secret_facts[random(0, secret_facts.len-1)]
    end if
    return fact
end function

custom_obj = get_custom_object
kernel = null
shell = Shell.New(get_shell)
comp = shell.host_computer

update_libs = function(kernel, session, path)
    // Check if lib folder exists, otherwise, make it exist (mood tbh)
    if is_error(session.file.get_folder(path)) then
        p = Path.New(path)
        res = session.computer.create_folder(p.folder, p.name)
        if is_error(res) then kernel.print("$error;No permission to create folder: /etc/crow/libs")
    end if

    loaded = session.load_libs(path)

    // Find and copy rshell in /lib
    if not session.file.get_file(path+"/librshell.so") then
        rshell = session.file.get_file("/lib/librshell.so")
        if not is_error(rshell) and typeof(include_lib(rshell.path)) == "service" then rshell.copy(path, "librshell.so")
    end if
    // Find and copy apt in /lib
    if session.apt == null then
        file = session.file.get_file("/lib/aptclient.so")
        if not is_error(file) then file.copy(path, "aptclient.so")

        apt = include_lib(path + "/aptclient.so")
        session.apt = apt
    end if

    // Check / ask for hackshop ip
    if session.apt and session.apt.search("metaxploit.so").is_match("(in any repository$|refresh the file$)") then
        res = confirmation_prompt("No hackshops in sources.txt for apt. Do you want to add one?")
        if res then
            hackshop = null

            kernel.print("$T2;Searching a hackshop...")
            while hackshop == null
                router = get_router(kernel.env.RAND_IP)
                if router == null then continue
                for x in router.used_ports
                    if x.port_number != 1542 then continue
                    hackshop = router.public_ip
                    break
                end for
            end while

            session.apt.add_repo(hackshop, 1542)
            session.apt.update()

            kernel.print("$S;Added repository from ip: $P;" + hackshop)
        end if
    end if

    // Install missing
    if len(loaded) != 3 and kernel.settings.library.auto_install == "true" and not is_error(loaded) then
        if not session.apt then 
            kernel.print("$error;Aptclient not present in "+path+", unable to install libraries")
        else
            for x in ["metaxploit.so", "crypto.so"] 
                if loaded.indexOf(x) != null then continue

                result = session.apt.install(x, path)
                if result == null then kernel.print("$error;Failed to install " + x)
                if result != "" and result != 1 then kernel.print("$error;Failed to install "+x+" : " + result)
            end for
        end if
    end if

    // Update metaxploit
    if session.apt and kernel.settings.library.auto_update_meta == "true" then
        check = session.apt.check_upgrade(path + "/metaxploit.so")

        if check isa string then 
            kernel.print("$error;Failed to check for update : " + check)

        else if check then
            result = session.apt.install("metaxploit.so", path)
            
            if result == null then kernel.print("$error;Failed to install metaxploit.so")
            if result != "" and result != 1 then kernel.print("$error;Failed to install metaxploit.so : " + result)
        end if
    end if
end function

kernel_setup = function()
    ses = Session.New(shell, active_user)

    e = comp.create_folder("/etc", "crow")
    print("<#4fa>Created folder <#4af>/etc/crow")
    if is_error(e) then return e
    
    e = comp.create_folder("/etc/crow", "tools")
    if is_error(e) then return e
    print("<#4fa>Created folder <#4af>/etc/crow/tools")
    
    e = comp.create_folder("/etc/crow", "libs")
    if is_error(e) then return e
    print("<#4fa>Created folder <#4af>/etc/crow/libs")

    e = comp.create_folder("/etc/crow", "exdb")
    if is_error(e) then return e
    print("<#4fa>Created folder <#4af>/etc/crow/exdb")

    e = comp.create_folder("/etc/crow", "macros")
    if is_error(e) then return e
    print("<#4fa>Created folder <#4af>/etc/crow/macros")

    e = comp.touch(ses.homepath, ".crowrc", SETTINGS_DEFAULT)
    if is_error(e) then return e
    print("<#4fa>Created file <#4af>" + ses.homepath + "/.crowrc")

    if program_path.is_match("^\/home\/\w+\/crowsploit$") then
        sep = program_path.split("/")
        owner = sep[2]
        folder = "/home/" + owner

        e = comp.touch(folder, ".crowrc", SETTINGS_DEFAULT)
        if is_error(e) then return e
        f = comp.File(folder+"/.crowrc")
        f.set_owner(owner)
        f.set_group(owner)
        print("<#4fa>Created file <#4af>" + folder + "/.crowrc")
    end if

    print(char(10) + "<#888>Setting up library path")

    kernel = new Kernel
    kernel.new_session(ses)
    kernel.use_session(ses)
    kernel.active_session = ses

    kernel.load_settings(ses.homepath + "/.crowrc")

    update_libs(kernel, ses, "/etc/crow/libs")
end function

if hasIndex(custom_obj, "kernel") and params == ["main"] then
    kernel = custom_obj["kernel"]
    remove(custom_obj, "kernel")

else if hasIndex(custom_obj, "kernel") then
    kernel = custom_obj.kernel(simple_hash(current_date))

    kernel.print("$P;Crowsploit connected to kernel")
    kernel.print("$T;Connected as $T2;" + active_user)
    custom_obj.remove("kernel")

    active = kernel.active_sessions[0]
    session = kernel.session
    session.shell = Shell.New(get_shell)
    session.user = active_user
    if comp.is_network_active then
        session.router = get_router
    end if

    session.path = program_path 
    session.file = session.file.get_folder(current_path)
    destination = current_path
    
    if not params.indexOf("nolibs") != null then
        active.shell.scp(active.meta_dir, destination, session.shell)
        active.shell.scp(active.apt_dir, destination, session.shell)
        if params.indexOf("crypto") != null then active.shell.scp(active.crypto_dir, destination, session.shell)

        if session.hasIndex("load_libs") then
            print("New method")
            loaded = session.load_libs(destination)
            for x in loaded
                kernel.print("$S;Loaded " + x[:-3])
            end for
        else
            // Backward compatability
            for x in ["metaxploit.so", "crypto.so", "aptclient.so"] 
                res = session.load_lib(destination +"/"+x)
                if res == null or res == false then continue
                kernel.print("$S;Loaded " + x[:-3])
            end for
        end if
    end if

    kernel.active_session = session
    kernel.active_sessions.push(session)
    kernel.env.ACTIVE = session.id

else if params == ["setup"] then
    e = kernel_setup()
    if is_error(e) then
        print(e.trace())
    else
        print("<#4fa>Setup complete")
        print("<#999>Move the <#4af>system<#999> and <#4af>exploit<#999> tools into the <#4af>/etc/crow/tools<#999> folder and restart crowsploit")
    end if
    exit()
else
    kernel = new Kernel
    session = Session.New(shell, active_user)
    if comp.is_network_active then session.router = get_router

    session.path = launch_path
    session.file = session.file.get_folder(current_path)

    kernel.new_session(session)
    kernel.active_session = session
    kernel.active_sessions.push(session)

    kernel.use_session(session)

    error = kernel.load_settings(session.homepath + "/.crowrc")
    if is_error(error) then
        print("<#e05>Missing settings")
        print("<#e05>Creating settings in : " + session.homepath + "/.crowrc")
        touch_err = comp.touch(session.homepath, ".crowrc", SETTINGS_DEFAULT)
        if touch_err then print(touch_err.message)
        error = kernel.load_settings(session.homepath + "/.crowrc")
    end if
    if is_error(error) then exit(error.message)

    // Backwards compatability with loading library stuff
    if not kernel.settings.hasIndex("library") then
        kernel.settings.library = {
            "path":"/etc/crow/libs",
            "auto_update_meta":"true",
            "auto_install":"true"
        }
    end if
    if not kernel.settings.hasIndex("update") then
        kernel.settings.update = {
            "check":"true"
        }
    end if

    update_libs(kernel, session, kernel.settings.library.path)
    session.load_libs(kernel.settings.library.path)

    print(char(10))
    kernel.print(motd)
    print(char(10))
    kernel.line("Info", 47)
    kernel.print("              $P;By <b><u>JessaTehCrow" + char(10))
    kernel.print("       $S;Kernel version $T;: $T2;" + kernel.version)
    kernel.print("    $S;Interface version $T;: $T2;" + interface_version)
    if kernel.nightly then
        kernel.print("          $S;Kernel type$T; : $error;Nightly")
        kernel.print("$T;<i>    (Some features may not be stable)")
    end if

    print(char(10))
    kernel.print("$T;Fun fact")
    kernel.print("$S;<size=80%>" + get_fact())
    print(char(10))
    if session.crypto == null then
        kernel.print("$error;Crypto not found")
    end if
    if session.metax == null then
        kernel.print("$error;Metaxploit not found")
    end if
    kernel.load_tools()

    kernel.print()
    kernel.print("$S;Join the discord: $T2;discord.gg/qW5Uv2SAmq $S;for help and more info!")

    if kernel.settings.update.check == "true" then
        res = kernel.check_update(interface_version)
        if is_error(res) then print(res.trace)
        print("")
        kernel.print("$T2;!! You can turn off update checker in the .crowrc file !!")
    end if
    
    while kernel.keep_session
        custom_obj.kernel = kernel
        shell.launch(program_path, "main")
        kernel.silent = false
        kernel.piped = false
    end while
end if

while kernel.keep_session
    inp = user_input(kernel.get_prompt + " ")

    while inp.trim != "" and inp.trim()[-1] == "\"
        inp = inp.trim[:-1]
        user_inp = user_input(kernel.color("$input;") + " ")
        inp = inp + " " + user_inp
    end while

    if inp.trim == "" then continue

    kernel.run_command(inp)
end while